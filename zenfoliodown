#!/usr/bin/env perl
# Copyright 2012 Kevin Spencer <kevin@kevinspencer.org>
# Auth code and some refactoring <mitch@monger.net>
#
# Permission to use, copy, modify, distribute, and sell this software and its
# documentation for any purpose is hereby granted without fee, provided that
# the above copyright notice appear in all copies and that both that
# copyright notice and this permission notice appear in supporting
# documentation. No representations are made about the suitability of this
# software for any purpose. It is provided "as is" without express or
# implied warranty.
#
################################################################################

use File::Basename;
use Getopt::Long;
use LWP::UserAgent;
use XML::Simple;
use strict;
use warnings;

our $VERSION = 0.6;

my ($site, $album, $key);
GetOptions("site=s" => \$site, "album=s" => \$album, "key=s" => \$key);

if ((! $album) || (! $site)) {
    print "USAGE: $0 --site=example.zenfolio.com --album=album --key=key\n";
    exit();
}

# remove leading p if album follows usual zenfolio convention of p123456789
$album =~ s/^p// if ($album =~ /\b^p\d+\b/);

# And we need to store the output...
mkdir($album) || die "Could not create $album - $!\n" if (! -d $album);
my $album_id = $album;

# Start the network stuff!!

my $ua = LWP::UserAgent->new();
$ua->cookie_jar( {} );
$ua->agent("zenfoliodown/$VERSION");


my $api_url = 'http://'.$site.'/api/1.7/zfapi.asmx';

#First we need the authtoken.  We need this to get the photoset in the folder
my $token = get_token($api_url, $ua);
$ua->default_header('X-Zenfolio-Token' => $token);


# Photoset gets us a list of URLs, as well as a realmid
my ($realmid, $urllist) = get_photoset($api_url, $ua, $album_id);


#Now let's get a keyring (using that realmid).
#We seem to need the keyring to download the piks themselves.  I'd think
#that the authtoken would be enough... but it doesn't seem to work...

my $keyring = get_keyring($api_url, $ua, $realmid);
$ua->default_header('X-Zenfolio-Keyring' => $keyring);


# Now, finally... we do the downloads!!
PHOTO: for my $origurl (@$urllist) {
    my $downloaded_file = $album.'/'.basename($origurl);
    if (-e $downloaded_file) {
        print "Already downloaded $origurl, skipping.\n";
        next PHOTO;
    }
    for my $attempt (1..3) {
        my $response = $ua->get($origurl, 
                                ':content_file' => $downloaded_file);
        next PHOTO if ($response->is_success() && -e $downloaded_file);
    }
    # If we get here... We failed
    my $miss_log = $album . '/' . $album . '_miss.log';
    open(my $fh, '>>', $miss_log) || die "Could not append $miss_log - $!\n";
    print $fh $origurl, "\n";
    close($fh);
}





1;

####################################

sub get_token {
  my ($api_url, $ua) = @_;

  my $token;
  my $response = $ua->get($api_url."/AuthenticateVisitor?visitorKey=".$key);
  if ($response->is_success()) {
    die "Response from $api_url is not valid.\n" unless response_is_xml($response->content());

    my $xs = XML::Simple->new();
    my $data = $xs->XMLin($response->content());
    $token = $data->{content};
  }
  return $token;
} 

sub get_photoset {
  my ($api_url, $ua, $album_id) = @_;

  my $realmid = '';
  my @urllist;

  my $url = $api_url.'/LoadPhotoSetPhotos?photoSetId='.$album_id
                    .'&startingIndex=0&numberOfPhotos=1000';

  my $response = $ua->get($url);
  $ua->show_progress(1);
  if ($response->is_success()) {
    die "Response from $url is not valid.\n" unless response_is_xml($response->content());

    my $xs = XML::Simple->new();
    my $data = $xs->XMLin($response->content());
    die "Response from $url is not valid.\n" unless $data->{Photo};

    for my $photo (@{$data->{Photo}}) {
      $realmid ||= $photo->{AccessDescriptor}{RealmId};
      push @urllist, $photo->{OriginalUrl};
    }
  }

  return ($realmid, \@urllist);
}

sub get_keyring {
  my ($api_url, $ua, $realmid) = @_;

  my $keyring;
  my $response = $ua->get($api_url.'/KeyringAddKeyPlain?keyring=&realmId='
                                  .$realmid.'&password='.$key);
  if ($response->is_success()) {
    die "Response from $api_url is not valid.\n" unless response_is_xml($response->content());

    my $xs = XML::Simple->new();
    my $data = $xs->XMLin($response->content());
    $keyring = $data->{content};
  }
  return $keyring;
}

sub response_is_xml {
    return 1 if ($_[0] =~ /^<\?xml version="1.0"/);
    return;
}
